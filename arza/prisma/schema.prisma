generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions", "fullTextSearch", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm, fuzzystrmatch, uuidOssp(map: "uuid-ossp")]
}

enum arzaStatusEnum {
  newly
  delay
  working
  archive
}

enum wokrTypeEnum {
  arza
  hadysa
  administrativ
}

enum workSetItemStatusEnum {
  rejected
  approved
}

enum workSetTypeEnum {
  jenayat_hadysa
  jenayat_arza
  gozegchilik_onumchilik
}

model statement {
  id                  String     @id @default(cuid())
  recivedNumber       String     @unique @map("recived_number") // Hasaba alnan belgisi
  recivedDate         DateTime   @map("recived_date") @db.Date // Gelen senesi
  executorRecivedDate DateTime   @map("executor_recived_date") @db.Date // Ýerine ýetirijä berilen senesi
  executedDate        DateTime   @map("executed_date") @db.Date // Seredilen senesi
  applicant           String     @db.VarChar(255) // Ýüz tutýanyň familiýasy, ady, atasynyň ady, edarasynyň/ guramasynyň ady, salgysy
  description         String     @db.Text // Jenaýat hakynda arzanyň, habaryň gysgaça mazmuny
  result              String     @db.Text // Jenaýat hakynda seredilen arzanyň, habaryň netijesi
  userId              String     @map("user_id")
  status              String
  created             DateTime   @default(dbgenerated("NOW()"))
  updated             DateTime   @updatedAt @map("updated")
  deleted             DateTime?  @db.Timestamptz()
  dismantle           dismantle?
  // workedDate          DateTime   @map("worked_date") @db.Date // Kararyň sökülen senesi
}

model dismantle {
  statementId      String    @unique
  statements       statement @relation(fields: [statementId], references: [id])
  created          DateTime  @default(dbgenerated("NOW()"))
  updated          DateTime  @updatedAt @map("updated")
  deleted          DateTime? @db.Timestamptz()
  prosecutorResult String    @map("prosecutor_result") @db.Text // Prokuroryň gözegçilik tertibine kabul eden kararyt hakynda seredilen arzanyň, habaryň netijesi
}

model articles {
  id      String    @id @default(cuid())
  created DateTime  @default(dbgenerated("NOW()"))
  updated DateTime  @updatedAt @map("updated")
  deleted DateTime? @db.Timestamptz()
}

model umumyArzalar {
  id              String          @id @default(cuid())
  registredNumber Int             @map("registred_number")
  descrtiption    String          @db.Text
  deadline        DateTime        @default(dbgenerated("NOW() + interval '30 day'")) @db.Date
  applicants      applicants[]
  resolution      arzaResolution?
  work            works?
  files           Json[]          @db.JsonB
  workSets        workSets?
  status          arzaStatusEnum  @default(newly)
  createdBy       String
  created         DateTime        @default(dbgenerated("NOW()")) // gelen senesi
  updated         DateTime        @updatedAt @map("updated")
  deleted         DateTime?       @db.Timestamptz()

  @@map("umumy_arzalar")
}

model arzaResolution {
  arzaId     String       @unique
  arza       umumyArzalar @relation(fields: [arzaId], references: [id])
  executorId String
  type       wokrTypeEnum
  note       String       @db.Text
  createdBy  String
  created    DateTime     @default(dbgenerated("NOW()"))
  updated    DateTime     @updatedAt @map("updated")
  deleted    DateTime?    @db.Timestamptz()

  @@map("arza_resolution")
}

model applicants {
  id             String       @id @default(cuid())
  arzaId         String
  arza           umumyArzalar @relation(fields: [arzaId], references: [id])
  passportSeriya String
  passportNumber Int
  name           String
  lastname       String
  createdBy      String
  created        DateTime     @default(dbgenerated("NOW()"))
  deleted        DateTime?    @db.Timestamptz()
}

model workSets {
  id              String          @id @default(cuid())
  registredNumber String
  arzaId          String  @unique
  arza            umumyArzalar    @relation(fields: [arzaId], references: [id])
  companyId       String
  executorId      String
  type            workSetTypeEnum // enum bolmaly [jeneyat arza, jenayat hadysa, administrativ]
  items           workSetItems[]
  createdBy       String
  created         DateTime        @default(dbgenerated("NOW()"))
  deleted         DateTime?       @db.Timestamptz()

  @@map("work_sets")
}

model workSetItems {
  id        String                 @id @default(cuid())
  files     Json[]                 @db.JsonB
  type      String
  company   String
  author    String
  createdBy String
  status    workSetItemStatusEnum?
  reason    String?
  created   DateTime               @default(dbgenerated("NOW()"))
  deleted   DateTime?              @db.Timestamptz()
  workSetId String                 @map("work_set_id")
  workSet   workSets               @relation(fields: [workSetId], references: [id])

  @@map("work_set_items")
}

// duzuetmeli......
model works {
  id           String       @id @default(cuid())
  arzaId       String       @unique
  arza         umumyArzalar @relation(fields: [arzaId], references: [id])
  executorId   String       @map("executor_id")
  executedDays Int          @map("executed_days")
  type         wokrTypeEnum
  createdBy    String
  created      DateTime     @default(dbgenerated("NOW()"))
  deleted      DateTime?    @db.Timestamptz()
}
