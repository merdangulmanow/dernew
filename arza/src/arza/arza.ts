// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.2
// source: arza.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "arza";

export enum arzaStatusEnum {
  newly = 0,
  working = 1,
  delay = 3,
  UNRECOGNIZED = -1,
}

export enum workTypeEnum {
  arza = 0,
  hadysa = 1,
  administrativ = 2,
  UNRECOGNIZED = -1,
}

/** MODELS */
export interface Empty {
}

export interface Applicant {
  id: string;
  arzaId: string;
  passportSeriya: string;
  passportNumber: number;
  name: string;
  lastname: string;
}

export interface Arza {
  id: string;
  created: string;
  registredNumber: number;
  descrtiption: string;
  deadline: string;
  applicants: Applicant[];
  files: Files[];
  status: arzaStatusEnum;
  createdBy: string;
  work?: Works | undefined;
  resolution?: Resolution | undefined;
  workSet?: WorkSet | undefined;
}

export interface Arzalar {
  count: number;
  newlyCount: number;
  delayCount: number;
  rows: Arza[];
}

export interface Files {
  id: string;
  url: string;
}

export interface Resolution {
  arzaId: string;
  executorId: string;
  type: workTypeEnum;
  note?: string | undefined;
  createdBy?: string | undefined;
}

export interface Works {
  id: string;
  arzaId: string;
  executorId: string;
  executedDays: number;
  type: workTypeEnum;
  createdBy: string;
  workSets: WorkSet[];
  status: string;
}

export interface WorkSets {
  count: number;
  rows: WorkSet[];
}

export interface WorkSetItems {
  id?: string | undefined;
  workSetId: string;
  files: Files[];
  type: string;
  company: string;
  author: string;
  createdBy?: string | undefined;
  created?: string | undefined;
}

export interface WorkSet {
  id: string;
  registredNumber: string;
  arzaId: string;
  companyId: string;
  executorId: string;
  type: string;
}

export interface CreateApplicantDto {
  id?: string | undefined;
  passportSeriya: string;
  passportNumber: number;
  name: string;
  lastname: string;
}

export interface CreateArzaDto {
  id?: string | undefined;
  created?: string | undefined;
  descrtiption: string;
  applicants: CreateApplicantDto[];
  files: Files[];
  createdBy: string;
}

export interface FindOneArzaDto {
  id: string;
}

export interface FindAllDto {
  page?: number | undefined;
  pageSize?: number | undefined;
  registredNumber?: number | undefined;
  created?: string | undefined;
  passportSeriya?: string | undefined;
  passportNumber?: number | undefined;
  search?: string | undefined;
  name?: string | undefined;
  status: arzaStatusEnum[];
}

export interface FindAllWorkSetsDto {
  page?: number | undefined;
  pageSize?: number | undefined;
  status?: string | undefined;
  createdBy?: string | undefined;
}

export interface CreateDismantleDto {
  prosecutorResult: string;
  statementId: string;
}

export interface WorkSetItemDto {
  id?: string | undefined;
  arzaId: string;
  files: Files[];
  type: string;
  companyId: string;
  author: string;
  createdBy?: string | undefined;
  status: string;
}

export interface ApproveDocDto {
  id: string;
  approve: boolean;
  reason?: string | undefined;
}

export const ARZA_PACKAGE_NAME = "arza";

export interface ArzaServiceClient {
  createArza(request: CreateArzaDto): Observable<Arza>;

  findAllArza(request: FindAllDto): Observable<Arzalar>;

  findOneArza(request: FindOneArzaDto): Observable<Arza>;

  removeArza(request: FindOneArzaDto): Observable<Arza>;

  createDismantle(request: CreateDismantleDto): Observable<Arza>;

  createResolution(request: Resolution): Observable<Arza>;

  archiveAza(request: FindOneArzaDto): Observable<Arza>;

  addWorkSetItem(request: WorkSetItems): Observable<WorkSetItems>;

  getWorkSets(request: FindAllWorkSetsDto): Observable<WorkSets>;

  getWorkSetsItems(request: FindOneArzaDto): Observable<WorkSetItems>;

  approveDoc(request: ApproveDocDto): Observable<WorkSetItems>;
}

export interface ArzaServiceController {
  createArza(request: CreateArzaDto): Promise<Arza> | Observable<Arza> | Arza;

  findAllArza(request: FindAllDto): Promise<Arzalar> | Observable<Arzalar> | Arzalar;

  findOneArza(request: FindOneArzaDto): Promise<Arza> | Observable<Arza> | Arza;

  removeArza(request: FindOneArzaDto): Promise<Arza> | Observable<Arza> | Arza;

  createDismantle(request: CreateDismantleDto): Promise<Arza> | Observable<Arza> | Arza;

  createResolution(request: Resolution): Promise<Arza> | Observable<Arza> | Arza;

  archiveAza(request: FindOneArzaDto): Promise<Arza> | Observable<Arza> | Arza;

  addWorkSetItem(request: WorkSetItems): Promise<WorkSetItems> | Observable<WorkSetItems> | WorkSetItems;

  getWorkSets(request: FindAllWorkSetsDto): Promise<WorkSets> | Observable<WorkSets> | WorkSets;

  getWorkSetsItems(request: FindOneArzaDto): Promise<WorkSetItems> | Observable<WorkSetItems> | WorkSetItems;

  approveDoc(request: ApproveDocDto): Promise<WorkSetItems> | Observable<WorkSetItems> | WorkSetItems;
}

export function ArzaServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createArza",
      "findAllArza",
      "findOneArza",
      "removeArza",
      "createDismantle",
      "createResolution",
      "archiveAza",
      "addWorkSetItem",
      "getWorkSets",
      "getWorkSetsItems",
      "approveDoc",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ArzaService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ArzaService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ARZA_SERVICE_NAME = "ArzaService";
